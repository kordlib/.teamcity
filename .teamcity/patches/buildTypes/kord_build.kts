package patches.buildTypes

import jetbrains.buildServer.configs.kotlin.*
import jetbrains.buildServer.configs.kotlin.BuildType
import jetbrains.buildServer.configs.kotlin.buildFeatures.PullRequests
import jetbrains.buildServer.configs.kotlin.buildFeatures.buildCache
import jetbrains.buildServer.configs.kotlin.buildFeatures.commitStatusPublisher
import jetbrains.buildServer.configs.kotlin.buildFeatures.pullRequests
import jetbrains.buildServer.configs.kotlin.buildSteps.gradle
import jetbrains.buildServer.configs.kotlin.buildSteps.script
import jetbrains.buildServer.configs.kotlin.failureConditions.BuildFailureOnMetric
import jetbrains.buildServer.configs.kotlin.failureConditions.failOnMetricChange
import jetbrains.buildServer.configs.kotlin.matrix
import jetbrains.buildServer.configs.kotlin.triggers.vcs
import jetbrains.buildServer.configs.kotlin.ui.*

/*
This patch script was generated by TeamCity on settings change in UI.
To apply the patch, create a buildType with id = 'kord_build'
in the project with id = 'kord', and delete the patch script.
*/
create(RelativeId("kord"), BuildType({
    id("kord_build")
    name = "Build & Push"

    vcs {
        root(RelativeId("kordVcsRoot"))
    }

    steps {
        script {
            name = "Install curl"

            conditions {
                matches("teamcity.agent.os.family", "Linux")
            }
            workingDir = "curl_build"
            scriptContent = """
                if [ ! -e Makefile ]; then
                    curl -o curl.tgz https://curl.se/download/curl-8.5.0.tar.gz
                    tar xzvf curl.tgz --strip-components=1
                    rm curl.tgz
                    ./configure --with-openssl --enable-websockets
                fi
                if [ ! -e src/curl ]; then
                    make
                fi
                sudo make install
                sudo cp -r /usr/local/lib/libcurl* /usr/lib64/
                sudo cp -r /usr/local/include/curl/ /usr/include
            """.trimIndent()
        }
        gradle {
            id = "checks"
            tasks = "testOnCurrentOS"
            jdkHome = "%env.JDK_11_0%"
        }
        gradle {
            id = "publish"
            tasks = "publishForCurrentOs"
            jdkHome = "%env.JDK_11_0%"
        }
    }

    triggers {
        vcs {
            branchFilter = "|+:feature/native"
        }
    }

    failureConditions {
        failOnMetricChange {
            metric = BuildFailureOnMetric.MetricType.TEST_FAILED_COUNT
            units = BuildFailureOnMetric.MetricUnit.DEFAULT_UNIT
            comparison = BuildFailureOnMetric.MetricComparison.MORE
            compareTo = build {
                buildRule = lastSuccessful()
            }
        }
        failOnMetricChange {
            metric = BuildFailureOnMetric.MetricType.TEST_COUNT
            threshold = 10
            units = BuildFailureOnMetric.MetricUnit.PERCENTS
            comparison = BuildFailureOnMetric.MetricComparison.LESS
            compareTo = build {
                buildRule = lastSuccessful()
            }
        }
    }

    features {
        commitStatusPublisher {
            vcsRootExtId = "kordVcsRoot"
            publisher = github {
                githubUrl = "https://api.github.com"
                authType = storedToken {
                    tokenId = "tc_token_id:CID_ead29039499734d5f53ebb99e1e14bf5:-1:14179102-c8b1-4427-82dc-d7ab819ae5d7"
                }
            }
        }
        pullRequests {
            vcsRootExtId = "kordVcsRoot"
            provider = github {
                authType = storedToken {
                    tokenId = "tc_token_id:CID_ead29039499734d5f53ebb99e1e14bf5:-1:14179102-c8b1-4427-82dc-d7ab819ae5d7"
                }
                filterAuthorRole = PullRequests.GitHubRoleFilter.EVERYBODY
            }
        }
        matrix {
            os = listOf(
                value("Linux"),
                value("Mac OS"),
                value("Windows")
            )
        }
        buildCache {
            name = "curl_build"
            rules = "curl_build"
        }
    }
}))

