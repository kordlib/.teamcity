package patches.buildTypes

import jetbrains.buildServer.configs.kotlin.*
import jetbrains.buildServer.configs.kotlin.BuildType
import jetbrains.buildServer.configs.kotlin.buildFeatures.PullRequests
import jetbrains.buildServer.configs.kotlin.buildFeatures.commitStatusPublisher
import jetbrains.buildServer.configs.kotlin.buildFeatures.pullRequests
import jetbrains.buildServer.configs.kotlin.buildSteps.qodana
import jetbrains.buildServer.configs.kotlin.failureConditions.BuildFailureOnMetric
import jetbrains.buildServer.configs.kotlin.failureConditions.failOnMetricChange
import jetbrains.buildServer.configs.kotlin.triggers.vcs
import jetbrains.buildServer.configs.kotlin.ui.*

/*
This patch script was generated by TeamCity on settings change in UI.
To apply the patch, create a buildType with id = 'kord_qodana'
in the project with id = 'kord', and delete the patch script.
*/
create(RelativeId("kord"), BuildType({
    id("kord_qodana")
    name = "Code Quality"

    vcs {
        root(RelativeId("kordVcsRoot"))
    }

    steps {
        qodana {
            linter = jvm {
            }
            cloudToken = "credentialsJSON:bcc43ac3-b408-44d2-bb5a-361fe53b5652"
        }
    }

    triggers {
        vcs {
            branchFilter = """
                +:master
                +:main
                +:pull/*
                +:tags/*
            """.trimIndent()
        }
    }

    failureConditions {
        failOnMetricChange {
            metric = BuildFailureOnMetric.MetricType.TEST_FAILED_COUNT
            units = BuildFailureOnMetric.MetricUnit.DEFAULT_UNIT
            comparison = BuildFailureOnMetric.MetricComparison.MORE
            compareTo = build {
                buildRule = lastSuccessful()
            }
        }
        failOnMetricChange {
            metric = BuildFailureOnMetric.MetricType.TEST_COUNT
            threshold = 10
            units = BuildFailureOnMetric.MetricUnit.PERCENTS
            comparison = BuildFailureOnMetric.MetricComparison.LESS
            compareTo = build {
                buildRule = lastSuccessful()
            }
        }
    }

    features {
        commitStatusPublisher {
            vcsRootExtId = "kordVcsRoot"
            publisher = github {
                githubUrl = "https://api.github.com"
                authType = storedToken {
                    tokenId = "tc_token_id:CID_ead29039499734d5f53ebb99e1e14bf5:-1:14179102-c8b1-4427-82dc-d7ab819ae5d7"
                }
            }
        }
        pullRequests {
            vcsRootExtId = "kordVcsRoot"
            provider = github {
                authType = storedToken {
                    tokenId = "tc_token_id:CID_ead29039499734d5f53ebb99e1e14bf5:-1:14179102-c8b1-4427-82dc-d7ab819ae5d7"
                }
                filterAuthorRole = PullRequests.GitHubRoleFilter.EVERYBODY
            }
        }
    }

    requirements {
        matches("teamcity.agent.os.family", "Linux")
    }
}))

